<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }} - Tim & Jen's Recipe Book</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <header>
        <h1>Tim & Jen's Recipe Book</h1>
        <nav>
            <a href="/">Home</a>
            <a href="/about/">About</a>
        </nav>
    </header>
    <main>
        {{ content | safe }}
    </main>
    <footer>
        <p>&copy; 2024 Tim &amp; Jen</p>
    </footer>
    <script>
        window.addEventListener('load', () => {
            // Store prefetched content
            const pageCache = new Map();

            // Function to fetch and cache content
            async function prefetchPage(url) {
                // Don't refetch if already cached
                if (pageCache.has(url)) {
                    return;
                }

                try {
                    const response = await fetch(url);
                    const text = await response.text();
                    pageCache.set(url, text);
                } catch (error) {
                    console.error('Prefetch failed:', error);
                }
            }

            // Function to update page content
            function updatePageContent(content, url) {
                const parser = new DOMParser();
                const doc = parser.parseFromString(content, 'text/html');
                
                // Update the page content
                document.title = doc.title;
                document.querySelector('main').innerHTML = doc.querySelector('main').innerHTML;
                
                // Setup links on the new content
                setupLinks();
            }

            // Function to setup all links on the page
            function setupLinks() {
                const links = document.querySelectorAll('a');
                links.forEach(link => {
                    if (link.href.startsWith(window.location.origin) || link.href.startsWith('/')) {
                        // Remove existing click listeners
                        const newLink = link.cloneNode(true);
                        link.parentNode.replaceChild(newLink, link);
                        
                        // Prefetch content
                        prefetchPage(newLink.href);

                        // Add click handler
                        newLink.addEventListener('click', async (e) => {
                            e.preventDefault();
                            
                            // If we have cached content, use it
                            if (pageCache.has(newLink.href)) {
                                updatePageContent(pageCache.get(newLink.href), newLink.href);
                                // Update the URL without a page reload
                                history.pushState({ url: newLink.href }, '', newLink.href);
                            } else {
                                // Fallback to normal navigation if cache missing
                                window.location.href = newLink.href;
                            }
                        });
                    }
                });
            }

            // Handle back/forward navigation
            window.addEventListener('popstate', (event) => {
                const currentUrl = window.location.href;
                if (pageCache.has(currentUrl)) {
                    updatePageContent(pageCache.get(currentUrl), currentUrl);
                } else {
                    // If not in cache, fetch it
                    fetch(currentUrl)
                        .then(response => response.text())
                        .then(content => {
                            pageCache.set(currentUrl, content);
                            updatePageContent(content, currentUrl);
                        })
                        .catch(error => {
                            console.error('Failed to fetch page:', error);
                            window.location.reload(); // Fallback to full page reload
                        });
                }
            });

            // Initial setup of links
            setupLinks();
        });
    </script>
</body>
</html>
